//
//  Endpoint.swift
//  Kinvey
//
//  Created by Victor Barros on 2016-01-15.
//  Copyright Â© 2016 Kinvey. All rights reserved.
//

import Foundation

internal enum Endpoint {
    
    case User(client: Client)
    case UserById(client: Client, userId: String)
    case UserDelete(client: Client, userId: String, hard: Bool)
    case UserLookup(client: Client)
    case UserExistsByUsername(client: Client)
    case UserLogin(client: Client)
    case SendEmailConfirmation(client: Client, username: String)
    case UserResetPassword(usernameOrEmail: String, client: Client)
    case UserForgotUsername(client: Client)
    
    case OAuthAuth(client: Client, redirectURI: NSURL)
    case OAuthToken(client: Client)
    
    case AppData(client: Client, collectionName: String)
    case AppDataById(client: Client, collectionName: String, id: String)
    case AppDataByQuery(client: Client, collectionName: String, query: Query)
    case AppDataCount(client: Client, collectionName: String, query: Query?)
    
    case PushRegisterDevice(client: Client)
    case PushUnRegisterDevice(client: Client)
    
    case BlobById(client: Client, fileId: String)
    case BlobUpload(client: Client, fileId: String?, tls: Bool)
    case BlobDownload(client: Client, fileId: String?, query: Query?, tls: Bool, ttlInSeconds: UInt?)
    case BlobByQuery(client: Client, query: Query)
    
    case URL(url: NSURL)
    case CustomEndpooint(client: Client, name: String)
    
    func url() -> NSURL {
        switch self {
        case .User(let client):
            return client.apiHostName.URLByAppendingPathComponent("/user/\(client.appKey!)")!
        case .UserById(let client, let userId):
            return client.apiHostName.URLByAppendingPathComponent("/user/\(client.appKey!)/\(userId)")!
        case .UserDelete(let client, let userId, let hard):
            let url = client.apiHostName.URLByAppendingPathComponent("/user/\(client.appKey!)/\(userId)")
            if hard {
                return NSURL(string: url!.absoluteString! + "?hard=true")!
            }
            return url!
        case .UserLookup(let client):
            return client.apiHostName.URLByAppendingPathComponent("/user/\(client.appKey!)/_lookup")!
        case .UserExistsByUsername(let client):
            return client.apiHostName.URLByAppendingPathComponent("/rpc/\(client.appKey!)/check-username-exists")!
        case .UserLogin(let client):
            return client.apiHostName.URLByAppendingPathComponent("/user/\(client.appKey!)/login")!
        case .SendEmailConfirmation(let client, let username):
            return client.apiHostName.URLByAppendingPathComponent("/rpc/\(client.appKey!)/\(username)/user-email-verification-initiate")!
        case .UserResetPassword(let usernameOrEmail, let client):
            return client.apiHostName.URLByAppendingPathComponent("/rpc/\(client.appKey!)/\(usernameOrEmail)/user-password-reset-initiate")!
        case .UserForgotUsername(let client):
            return client.apiHostName.URLByAppendingPathComponent("/rpc/\(client.appKey!)/user-forgot-username")!
        case .OAuthAuth(let client, let redirectURI):
            let characterSet = NSCharacterSet.URLQueryAllowedCharacterSet().mutableCopy() as! NSMutableCharacterSet
            characterSet.removeCharactersInString(":#[]@!$&'()*+,;=")
            let redirectURIEncoded = redirectURI.absoluteString!.stringByAddingPercentEncodingWithAllowedCharacters(characterSet) ?? redirectURI.absoluteString
            let query = "?client_id=\(client.appKey!)&redirect_uri=\(redirectURIEncoded)&response_type=code"
            return NSURL(string: client.authHostName.URLByAppendingPathComponent("/oauth/auth")!.absoluteString! + query)!
        case .OAuthToken(let client):
            return client.authHostName.URLByAppendingPathComponent("/oauth/token")!
        case .AppData(let client, let collectionName):
            return client.apiHostName.URLByAppendingPathComponent("/appdata/\(client.appKey!)/\(collectionName)")!
        case .AppDataById(let client, let collectionName, let id):
            return client.apiHostName.URLByAppendingPathComponent("/appdata/\(client.appKey!)/\(collectionName)/\(id)")!
        case .AppDataByQuery(let client, let collectionName, let query):
            let url = client.apiHostName.URLByAppendingPathComponent("/appdata/\(client.appKey!)/\(collectionName)/")!.absoluteString!
            if (query.isEmpty()){
                return NSURL(string: url)!
            }
            
            let queryParams = query.queryParams
            if queryParams.count > 0 {
                return NSURL(string: "\(url)?\(queryParams.urlQueryEncoded)")!
            }
            
            return NSURL(string: url)!
        case .AppDataCount(let client, let collectionName, let query):
            let url = client.apiHostName.URLByAppendingPathComponent("/appdata/\(client.appKey!)/\(collectionName)/_count")!.absoluteString!
            if let query = query {
                let queryParams = query.queryParams
                if queryParams.count > 0 {
                    return NSURL(string: "\(url)?\(queryParams.urlQueryEncoded)")!
                }
            }
            return NSURL(string: url)!
        case .PushRegisterDevice(let client):
            return client.apiHostName.URLByAppendingPathComponent("/push/\(client.appKey!)/register-device")!
        case .PushUnRegisterDevice(let client):
            return client.apiHostName.URLByAppendingPathComponent("/push/\(client.appKey!)/unregister-device")!
        case .BlobById(let client, let fileId):
            return BlobDownload(client: client, fileId: fileId, query: nil, tls: false, ttlInSeconds: nil).url()
        case .BlobUpload(let client, let fileId, let tls):
            return BlobDownload(client: client, fileId: fileId, query: nil, tls: tls, ttlInSeconds: nil).url()
        case .BlobDownload(let client, let fileId, let query, let tls, let ttlInSeconds):
<<<<<<< 671a0869ca4784cbd95722e2e2300436c7c6336f
            let url = client.apiHostName.URLByAppendingPathComponent("/blob/\(client.appKey!)/\(fileId ?? "")")!.absoluteString!
=======
            let url = client.apiHostName.URLByAppendingPathComponent("/blob/\(client.appKey!)/\(fileId ?? "")")!.absoluteString
>>>>>>> change to be compatible with xcode 8 and swift 2.3
            
            var queryParams = [String : String]()
            
            if tls {
                queryParams["tls"] = "true"
            }
            
            if let ttlInSeconds = ttlInSeconds {
                queryParams["ttl_in_seconds"] = String(ttlInSeconds)
            }
            
            if let query = query where query.queryParams.count > 0 {
                for (key, value) in query.queryParams {
                    queryParams[key] = value
                }
            }
<<<<<<< 671a0869ca4784cbd95722e2e2300436c7c6336f
            
            if queryParams.count > 0 {
                return NSURL(string: "\(url)?\(queryParams.urlQueryEncoded)")!
            }
            return NSURL(string: url)!
=======
            return NSURL(string: url!)!
>>>>>>> change to be compatible with xcode 8 and swift 2.3
        case .BlobByQuery(let client, let query):
            return BlobDownload(client: client, fileId: nil, query: query, tls: true, ttlInSeconds: nil).url()
        case .URL(let url):
            return url
        case .CustomEndpooint(let client, let name):
            return client.apiHostName.URLByAppendingPathComponent("/rpc/\(client.appKey!)/custom/\(name)")!
        }
    }
    
}
