//
// Prefix header for all source files of the 'KinveyKit' target in the 'KinveyKit' project
//
// Copyright (c) 2011-2015 Kinvey, Inc.
//
// This software is licensed to you under the Kinvey terms of service located at
// http://www.kinvey.com/terms-of-use. By downloading, accessing and/or using this
// software, you hereby accept such terms of service  (and any agreement referenced
// therein) and agree that you have read, understand and agree to be bound by such
// terms of service and are of legal age to agree to such terms with Kinvey.
//
// This software contains valuable confidential and proprietary information of
// KINVEY, INC and is subject to applicable licensing agreements.
// Unauthorized reproduction, transmission or distribution of this file and its
// contents is a violation of applicable laws.
//

#ifdef __OBJC__
    @import Foundation;
#endif


#define ifNotNil(x,val) (x == nil) ? nil : val;
#define setIfValNotNil(propToSet, val) if (val != nil) propToSet = val;
#define ifNil(x, val) if (x == nil) x = val;

#define fieldExistsAndIsYES(dict, field) dict != nil && dict[field] != nil && [dict[field] boolValue] == YES

#define fieldExistsAndIsNO(dict, field) dict != nil && dict[field] != nil && [dict[field] boolValue] == NO

#define doLater(blk)

#define constantsEqual(str, const) str == const || [str isEqualToString:const]
#define setIfEmpty(dict,key,val) if (dict[key] == nil) dict[key] = val

#ifdef BUILD_FOR_UNIT_TEST
#define DBAssert(condition,description, ...) NSAssert(condition, description, ##__VA_ARGS__)
#else
#define DBAssert(condition,description, ...)
#endif

#if NEVER && KINVEYKIT2_UPGRADE_WARNINGS
#define DO_PRAGMA(x) _Pragma (#x)
#define KK2(x) DO_PRAGMA(message ("KK2 - " #x))
#else
#define KK2(x)
#endif

#define DISPATCH_ASYNC_MAIN_QUEUE(block) dispatch_async(dispatch_get_main_queue(), ^{ block; })

#define SWITCH_TO_MAIN_THREAD_COMPLETION_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSCompletionBlock completionBlockOriginal = completionBlock; \
    completionBlock = ^(NSArray *objectsOrNil, NSError *errorOrNil) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(objectsOrNil, errorOrNil); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(objectsOrNil, errorOrNil)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_PROGRESS_BLOCK(progressBlock) \
if (progressBlock) { \
    KCSProgressBlock progressBlockOriginal = progressBlock; \
    progressBlock = ^(NSArray *objects, double percentComplete) { \
        if ([NSThread isMainThread]) { \
            progressBlockOriginal(objects, percentComplete); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(progressBlockOriginal(objects, percentComplete)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_PROGRESS_BLOCK2(progressBlock) \
if (progressBlock) { \
    KCSProgressBlock2 progressBlockOriginal = progressBlock; \
    progressBlock = ^(NSArray *objects, double percentComplete, NSDictionary* additionalContext) { \
        if ([NSThread isMainThread]) { \
            progressBlockOriginal(objects, percentComplete, additionalContext); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(progressBlockOriginal(objects, percentComplete, additionalContext)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_GROUP_COMPLETION_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSGroupCompletionBlock completionBlockOriginal = completionBlock; \
    completionBlock = ^(KCSGroup* valuesOrNil, NSError* errorOrNil) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(valuesOrNil, errorOrNil); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(valuesOrNil, errorOrNil)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_COUNT_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSCountBlock completionBlockOriginal = completionBlock; \
    completionBlock = ^(unsigned long count, NSError *errorOrNil) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(count, errorOrNil); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(count, errorOrNil)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_DELETION_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSDeletionBlock completionBlockOriginal = completionBlock; \
    completionBlock = ^(NSDictionary* deletionDictOrNil, NSError *errorOrNil) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(deletionDictOrNil, errorOrNil); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(deletionDictOrNil, errorOrNil)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_FILE_UPLOAD_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSFileUploadCompletionBlock completionBlockOriginal = completionBlock; \
    completionBlock = ^(KCSFile* uploadInfo, NSError* error) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(uploadInfo, error); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(uploadInfo, error)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_FILE_DOWNLOAD_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSFileDownloadCompletionBlock completionBlockOriginal = completionBlock; \
    completionBlock = ^(NSArray* downloadedResources, NSError* error) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(downloadedResources, error); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(downloadedResources, error)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_USER_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSUserCompletionBlock completionBlockOriginal = completionBlock; \
    completionBlock = ^(KCSUser* user, NSError* errorOrNil, KCSUserActionResult result) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(user, errorOrNil, result); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(user, errorOrNil, result)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_USER2_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSUser2CompletionBlock completionBlockOriginal = completionBlock; \
    completionBlock = ^(id<KCSUser2>user, NSError* error) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(user, error); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(user, error)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_DATA_STORE_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSDataStoreCompletion completionBlockOriginal = completionBlock; \
    completionBlock = ^(NSArray* objects, NSError* error) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(objects, error); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(objects, error)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_DATA_STORE_COUNT_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSDataStoreCountCompletion completionBlockOriginal = completionBlock; \
    completionBlock = ^(NSUInteger count, NSError* error) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(count, error); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(count, error)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_DATA_STORE_OBJECT_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSDataStoreObjectCompletion completionBlockOriginal = completionBlock; \
    completionBlock = ^(NSDictionary* object, NSError* error) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(object, error); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(object, error)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_PING_BLOCK2(completionBlock) \
if (completionBlock) { \
    KCSPingBlock2 completionBlockOriginal = completionBlock; \
    completionBlock = ^(NSDictionary* appInfo, NSError* error) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(appInfo, error); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(appInfo, error)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_PING_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSPingBlock completionBlockOriginal = completionBlock; \
    completionBlock = ^(KCSPingResult *result) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(result); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(result)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_SUCCESS_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSSuccessBlock completionBlockOriginal = completionBlock; \
    completionBlock = ^(BOOL success, NSError* error) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(success, error); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(success, error)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_USER_SEND_EMAIL_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSUserSendEmailBlock completionBlockOriginal = completionBlock; \
    completionBlock = ^(BOOL emailSent, NSError* errorOrNil) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(emailSent, errorOrNil); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(emailSent, errorOrNil)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_USER_CHECK_USERNAME_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSUserCheckUsernameBlock completionBlockOriginal = completionBlock; \
    completionBlock = ^(NSString* username, BOOL usernameAlreadyTaken, NSError* error) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(username, usernameAlreadyTaken, error); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(username, usernameAlreadyTaken, error)); \
        } \
    }; \
}

#define SWITCH_TO_MAIN_THREAD_CUSTOM_ENDPOINT_BLOCK(completionBlock) \
if (completionBlock) { \
    KCSCustomEndpointBlock completionBlockOriginal = completionBlock; \
    completionBlock = ^(id results, NSError* error) { \
        if ([NSThread isMainThread]) { \
            completionBlockOriginal(results, error); \
        } else { \
            DISPATCH_ASYNC_MAIN_QUEUE(completionBlockOriginal(results, error)); \
        } \
    }; \
}

#define NSTHREAD_IS_MAIN_THREAD NSParameterAssert([NSThread isMainThread])
#define NSTHREAD_IS_NOT_MAIN_THREAD NSParameterAssert(![NSThread isMainThread])

#define KCS_OBJECT_REFERENCE_COUNTER \
static NSInteger referenceCount = 0; \
\
+(instancetype)allocWithZone:(struct _NSZone *)zone \
{ \
    id instance = [super allocWithZone:zone]; \
    if (instance) { \
        @synchronized(self) { \
            referenceCount++; \
        } \
    } \
    return instance; \
} \
\
+(NSInteger)referenceCount \
{ \
    return referenceCount; \
} \
\
-(void)dealloc \
{ \
    @synchronized(self.class) { \
        referenceCount--; \
    } \
}

#import "KinveyHeaderInfo.h"
#import "KinveyInternal-Swift.h"
