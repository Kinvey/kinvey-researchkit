//
//  EmptyResponseDataTests.swift
//  KinveyKit
//
//  Created by Victor Barros on 2015-07-06.
//  Copyright (c) 2015 Kinvey. All rights reserved.
//

import UIKit
import XCTest

/*!
    Unit Test for MLIBZ-408: iOS SDK 1.32.1 KCSObjectMapper crash
*/
class EmptyResponseDataTests: KCSTestCase {
    
    private class MockProtocol : NSURLProtocol {
        
        override class func canInitWithRequest(request: NSURLRequest) -> Bool {
            return true
        }
        
        override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
            return request
        }
        
        override func startLoading() {
            let response = NSHTTPURLResponse(URL: request.URL!, statusCode: 200, HTTPVersion: "1.1", headerFields: [
                "Content-Type" : "application/json"
            ])!
            
            client?.URLProtocol(self, didReceiveResponse: response, cacheStoragePolicy: .NotAllowed)
            client?.URLProtocol(self, didLoadData: NSData())
            client?.URLProtocolDidFinishLoading(self)
        }
        
        private override func stopLoading() {
        }
        
    }
    
    var collection: KCSCollection!
    var store: KCSCachedStore!

    override func setUp() {
        super.setUp()
        
        KCSClient.sharedClient().initializeKinveyServiceForAppKey(
            "kid_-1WAs8Rh2",
            withAppSecret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            usingOptions: nil
        )
        
        login()
        
        collection = KCSCollection(fromString: "city", ofClass: NSMutableDictionary.self)
        store = KCSCachedStore(collection: collection, options: nil)
        
        KCSURLProtocol.registerClass(MockProtocol.self)
    }
    
    private func login() {
        weak var expectationLogin = expectationWithDescription("login")
        
        KCSUser.createAutogeneratedUser(nil, completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
            expectationLogin?.fulfill()
        })
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError?) -> Void in
            expectationLogin = nil
        })
        
        XCTAssertNotNil(KCSUser.activeUser())
    }
    
    override func tearDown() {
        KCSURLProtocol.unregisterClass(MockProtocol.self)
        
        super.tearDown()
    }

    func testEmptyResposeData() {
        weak var expectationQuery = expectationWithDescription("query")
        
        store.queryWithQuery(
            KCSQuery(),
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNil(error)
                XCTAssertNotNil(results)
                
                expectationQuery?.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
    }

}
