//
//  KCSErrorDebugTests.swift
//  KinveyKit
//
//  Created by Victor Barros on 2015-09-09.
//  Copyright (c) 2015 Kinvey. All rights reserved.
//

import UIKit
import XCTest

class KCSErrorDebugTests: KCSTestCase {
    
    private class MockProtocol: NSURLProtocol {
        
        override class func canInitWithRequest(request: NSURLRequest) -> Bool {
            return true
        }
        
        override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
            return request
        }
        
        override func startLoading() {
            let response = NSHTTPURLResponse(
                URL: request.URL!,
                statusCode: 400,
                HTTPVersion: "1.1",
                headerFields: [
                    "Content-Type" : "application/json"
                ]
            )!
            client?.URLProtocol(self, didReceiveResponse: response, cacheStoragePolicy: .NotAllowed)
            let body = [
                "error" : "Error test",
                "description" : "Description test",
                "debug" : [
                    "key1" : "value1",
                    "key2" : "value2"
                ]
            ]
            do {
                let bodyData = try NSJSONSerialization.dataWithJSONObject(body, options: [])
                client?.URLProtocol(self, didLoadData: bodyData)
                client?.URLProtocolDidFinishLoading(self)
            } catch let error as NSError {
                client?.URLProtocol(self, didFailWithError: error)
            }
        }
        
        private override func stopLoading() {
        }
        
    }

    override func setUp() {
        super.setUp()
        
        setupKCS()
        createAutogeneratedUser()
        
        KCSURLProtocol.registerClass(MockProtocol.self)
    }
    
    override func tearDown() {
        KCSUser.activeUser()?.logout()
        
        KCSURLProtocol.unregisterClass(MockProtocol.self)
        
        super.tearDown()
    }

    /*
    MLIBZ-565
    */
    func testErrorDebugAsObject() {
        let collection = KCSCollection(fromString: "bank", ofClass: NSMutableDictionary.self)
        let store = KCSLinkedAppdataStore(collection: collection, options: nil)
        
        weak var expectation = expectationWithDescription("delete")
        
        store.removeObject(
            "_id",
            withCompletionBlock: { (count: UInt, error: NSError!) -> Void in
                XCTAssertEqual(count, 0)
                XCTAssertNotNil(error)
                
                if let error = error {
                    XCTAssertNotNil(error.userInfo)
                    let userInfo = error.userInfo

                    let kinveyError: AnyObject? = userInfo[KCSErrorCodeKey]
                    XCTAssertNotNil(kinveyError)
                    if let kinveyError: AnyObject = kinveyError {
                        XCTAssertTrue(kinveyError.isKindOfClass(NSString.self))
                        
                        if kinveyError.isKindOfClass(NSString.self) {
                            let kinveyErrorStr = kinveyError as! String
                            XCTAssertEqual(kinveyErrorStr, "Error test")
                        }
                    }
                    
                    let description: AnyObject? = userInfo[NSLocalizedDescriptionKey]
                    XCTAssertNotNil(description)
                    if let description: AnyObject = description {
                        XCTAssertTrue(description.isKindOfClass(NSString.self))
                        
                        if description.isKindOfClass(NSString.self) {
                            let descriptionStr = description as! String
                            XCTAssertEqual(descriptionStr, "Description test")
                        }
                    }
                    
                    let debug: AnyObject? = userInfo[NSLocalizedFailureReasonErrorKey]
                    XCTAssertNotNil(debug)
                    if let debug: AnyObject = debug {
                        XCTAssertTrue(debug.isKindOfClass(NSDictionary.self))
                        
                        if debug.isKindOfClass(NSDictionary.self) {
                            let debugObj = debug as! NSDictionary
                            
                            XCTAssertNotNil(debugObj["key1"])
                            if let value = debugObj["key1"] as? String {
                                XCTAssertEqual(value, "value1")
                            }
                            
                            XCTAssertNotNil(debugObj["key2"])
                            if let value = debugObj["key2"] as? String {
                                XCTAssertEqual(value, "value2")
                            }
                        }
                    }
                }
                
                expectation?.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError?) -> Void in
            expectation = nil
        })
    }

}
