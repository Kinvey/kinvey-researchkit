//
//  KCSProtocolTests.swift
//  KinveyKit
//
//  Created by Victor Barros on 2015-04-24.
//  Copyright (c) 2015 Kinvey. All rights reserved.
//

import UIKit
import XCTest

class KCSProtocolTestsBaseURLProtocol: KCSTestCase {
    
    var request: NSURLRequest?
    var exception: NSException?
    var user: KCSUser?
    
    private class MockURLProtocol : NSURLProtocol {
        
        static var testCase: KCSProtocolTestsBaseURLProtocol!
        
        static var canInitWithRequestBlock: ((NSURLRequest) -> Bool)!;
        
        static var startLoadingBlock: ((NSURLProtocol) throws -> Void)!;
        
        override class func canInitWithRequest(request: NSURLRequest) -> Bool {
            testCase.request = request
            return canInitWithRequestBlock(request)
        }
        
        override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
            return request
        }
        
        private override func startLoading() {
            do {
                return try MockURLProtocol.startLoadingBlock(self)
            } catch let error as NSError {
                client!.URLProtocol(self, didFailWithError: error)
            }
        }
        
        private override func stopLoading() {
        }
        
    }
    
    func testBaseURLProtocol() {
        let config = KCSClientConfiguration(
            appKey: "kid_-1WAs8Rh2",
            secret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            options: nil
        )
        config.hostProtocol = "http"
        KCSClient.sharedClient().initializeWithConfiguration(config)
        
        MockURLProtocol.canInitWithRequestBlock = { (request: NSURLRequest) -> Bool in
            return false
        }
        
        weak var expectationCreateUser = expectationWithDescription("createUser")
        
        KCSTryCatch.`try`(
            { () -> Void in
                KCSUser.createAutogeneratedUser(
                    nil,
                    completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                        self.user = user
                        
                        expectationCreateUser?.fulfill()
                    }
                )
                XCTFail()
            },
            `catch`: { (exception: NSException!) -> Void in
                self.exception = exception
                
                expectationCreateUser?.fulfill()
            },
            finally: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
        
        XCTAssertNotNil(exception)
        XCTAssertNil(request)
        XCTAssertNil(user)
    }
    
    //MLIBZ-577
    func testBaseURL() {
        let config = KCSClientConfiguration(
            appKey: "kid_-1WAs8Rh2",
            secret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            options: nil
        )
//        config.setBaseURL("http://10.130.247.253:3000")
        
        XCTAssertEqual("http", config.hostProtocol)
        XCTAssertEqual("10.130.247.253", config.hostDomain)
        XCTAssertEqual("3000", config.hostPort)
        
        KCSClient.sharedClient().initializeWithConfiguration(config)
        
        XCTAssertEqual("http://10.130.247.253:3000/", KCSClient.sharedClient().configuration.baseURL())
        
        MockURLProtocol.canInitWithRequestBlock = { (request: NSURLRequest) -> Bool in
            return true
        }
        
        MockURLProtocol.startLoadingBlock = { (urlProtocol: NSURLProtocol) -> Void in
            let response = NSHTTPURLResponse(
                URL: urlProtocol.request.URL!,
                statusCode: 200,
                HTTPVersion: "1.1",
                headerFields: [
                    "Content-Type" : "application/json; charset=utf-8"
                ]
            )!
            urlProtocol.client!.URLProtocol(
                urlProtocol,
                didReceiveResponse: response,
                cacheStoragePolicy: .NotAllowed
            )
            
            let responseBody = [
                "username" : "448d0794-8406-44a2-ba97-220111034021",
                "password" : "75030924-06a9-46b2-b8a1-2ab4b68f77d7",
                "_kmd": [
                    "lmt" : "2015-09-15T15:52:32.419Z",
                    "ect" : "2015-09-15T15:52:32.419Z",
                    "authtoken" : "d53974aa-707e-4039-9e68-dca07bce352e.9AEptdOM57ndcWtAU8eYuboAaJQSRrvMRAG54ZWxaWU="
                ],
                "_id" : "55f83ec03495213e2a01301f",
                "_acl" : [
                    "creator":"55f83ec03495213e2a01301f"
                ]
            ]
            let data = try NSJSONSerialization.dataWithJSONObject(responseBody, options: [])
            urlProtocol.client!.URLProtocol(
                urlProtocol,
                didLoadData: data
            )
            
            urlProtocol.client!.URLProtocolDidFinishLoading(urlProtocol)
        }
        
        weak var expectationCreateUser = expectationWithDescription("createUser")
        
        KCSTryCatch.`try`(
            { () -> Void in
                KCSUser.createAutogeneratedUser(
                    nil,
                    completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                        self.user = user
                        
                        expectationCreateUser?.fulfill()
                    }
                )
            },
            `catch`: { (exception: NSException!) -> Void in
                self.exception = exception
                XCTFail()
                
                expectationCreateUser?.fulfill()
            },
            finally: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
        
        XCTAssertNil(exception)
        XCTAssertNotNil(request)
        XCTAssertNotNil(user)
    }
    
    override func setUp() {
        super.setUp()
        
        MockURLProtocol.testCase = self
        KCSURLProtocol.registerClass(MockURLProtocol.self)
    }
    
    override func tearDown() {
        KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        
        super.tearDown()
    }
    
}

class KCSProtocolTestsIdMissing: KCSTestCase {
    
    private class MockURLProtocol : NSURLProtocol {
        
        static var enabled = false
        
        override class func canInitWithRequest(request: NSURLRequest) -> Bool {
            return enabled
        }
        
        override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
            return request
        }
        
        private override func startLoading() {
            let user = [
                "name" : "Kinvey2"
            ]
            let data = try! NSJSONSerialization.dataWithJSONObject(user, options: NSJSONWritingOptions())
            
            let response = NSHTTPURLResponse(
                URL: request.URL!,
                statusCode: 200,
                HTTPVersion: "1.1",
                headerFields: [
                    "Content-Type" : "application/json",
                    "Content-Length" : String(data.length)
                ]
                )!
            client!.URLProtocol(
                self,
                didReceiveResponse: response,
                cacheStoragePolicy: NSURLCacheStoragePolicy.NotAllowed
            )
            client!.URLProtocol(self, didLoadData: data)
            client!.URLProtocolDidFinishLoading(self)
        }
        
        private override func stopLoading() {
        }
        
    }
    
    func testIdMissing() {
        let config = KCSClientConfiguration(
            appKey: "kid_-1WAs8Rh2",
            secret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            options: nil
        )
        KCSClient.sharedClient().initializeWithConfiguration(config)
        
        let collection = KCSCollection(fromString: "company", ofClass: NSMutableDictionary.self)
        let store = KCSLinkedAppdataStore(collection: collection, options: nil)
        
        weak var expectationCreateUser = expectationWithDescription("createUser")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNotNil(user)
                XCTAssertNil(error)
                
                expectationCreateUser?.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
        
        MockURLProtocol.enabled = true
        
        weak var expectationSave = expectationWithDescription("save")
        
        store.saveObject(
            [
                "name" : "Kinvey"
            ],
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNil(results)
                XCTAssertNotNil(error)
                XCTAssertEqual(error.localizedDescription, "KCSPersistable objects requires the `\(KCSEntityKeyId)` property")
                
                expectationSave?.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
    }
    
    override func setUp() {
        super.setUp()
        
        KCSURLProtocol.registerClass(MockURLProtocol.self)
    }
    
    override func tearDown() {
        KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        
        super.tearDown()
    }
    
}
