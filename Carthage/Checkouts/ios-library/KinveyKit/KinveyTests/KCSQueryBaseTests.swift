//
//  KCSQueryBaseTests.swift
//  KinveyKit
//
//  Created by Victor Barros on 2015-08-21.
//  Copyright (c) 2015 Kinvey. All rights reserved.
//

class KCSQueryBaseTests: KCSTestCase {
    
    func removeByQuery() {
        let collection = KCSCollection(fromString: "city", ofClass: NSMutableDictionary.self)
        let store = KCSCachedStore(collection: collection, options: [
            KCSStoreKeyCachePolicy : KCSCachePolicy.LocalFirst.rawValue,
            KCSStoreKeyOfflineUpdateEnabled : true
            ])
        
        let field = "name"
        let value = "Vancouver"
        
        weak var expectationSave = expectationWithDescription("save")
        
        store.saveObject(
            [ field : value ],
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNil(error)
                XCTAssertNotNil(results)
                
                XCTAssertTrue(NSThread.isMainThread())
                
                expectationSave?.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError?) -> Void in
            expectationSave = nil
        })
        
        weak var expectationRemove = expectationWithDescription("Remove")
        
        let query = KCSQuery(onField: field, withExactMatchForValue: value)
        if let userId = KCSUser.activeUser()?.userId {
            query.addQueryOnField("_acl.creator", withExactMatchForValue: userId)
        }
        store.removeObject(
            query,
            withCompletionBlock: { (count: UInt, error: NSError!) -> Void in
                XCTAssertNil(error)
                XCTAssertEqual(count, 1 as UInt)
                
                XCTAssertTrue(NSThread.isMainThread())
                
                expectationRemove?.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError?) -> Void in
            expectationRemove = nil
        })
    }
    
    func queryByDate() {
        KCSUser.activeUser()?.logout()
        
        weak var expectationLogin = expectationWithDescription("login")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                expectationLogin?.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError?) -> Void in
            expectationLogin = nil
        })
        
        let collection = KCSCollection(
            fromString: "city",
            ofClass: NSMutableDictionary.self
        )
        let store = KCSCachedStore(
            collection: collection,
            options: nil
        )
        
        weak var expectationSave = expectationWithDescription("save")
        
        store.saveObject(
            [
                "name" : "Vancouver",
                "info" : [
                    "settled" : NSDate(timeIntervalSince1970: -10707811.200)
                ]
            ],
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNotNil(results)
                XCTAssertNil(error)
                
                expectationSave?.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError?) -> Void in
            expectationSave = nil
        })
        
        weak var expectationQuery = expectationWithDescription("query")
        
        let query = KCSQuery(onField: "info.settled", usingConditional: KCSQueryConditional.KCSLessThanOrEqual, forValue: NSDate(timeIntervalSince1970: -10697788.800))
        if let userId = KCSUser.activeUser()?.userId {
            query.addQueryOnField("_acl.creator", withExactMatchForValue: userId)
        }
        store.queryWithQuery(
            query,
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNotNil(results)
                XCTAssertNil(error)
                if let results = results {
                    XCTAssertEqual(results.count, 1)
                }
                
                expectationQuery?.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError?) -> Void in
            expectationQuery = nil
        })
    }
    
}
