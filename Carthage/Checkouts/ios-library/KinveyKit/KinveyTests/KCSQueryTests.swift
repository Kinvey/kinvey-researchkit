//
//  KCSQueryTests.swift
//  KinveyKit
//
//  Created by Victor Barros on 2015-04-06.
//  Copyright (c) 2015 Kinvey. All rights reserved.
//

import UIKit
import XCTest

class KCSQueryTests: KCSQueryBaseTests {

    override func setUp() {
        super.setUp()
        
        KCSClient.sharedClient().initializeKinveyServiceForAppKey(
            "kid_-1WAs8Rh2",
            withAppSecret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            usingOptions: nil
        )
        
        weak var expectationLogin = expectationWithDescription("login")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNil(error)
                XCTAssertNotNil(user)
                
                expectationLogin?.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError?) -> Void in
            expectationLogin = nil
        })
    }
    
    override func tearDown() {
        KCSUser.activeUser()?.logout()
        
        super.tearDown()
    }
    
    func testRemoveByQuery() {
        removeByQuery()
    }
    
    func testQueryByDate() {
        queryByDate()
    }
    
    func testQueryByLocation() {
        KCSUser.activeUser()?.logout()
        
        weak var expectationLogin = expectationWithDescription("login")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNotNil(user)
                XCTAssertNil(error)
                
                expectationLogin?.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError?) -> Void in
            expectationLogin = nil
        })
        
        let collection = KCSCollection(
            fromString: "city",
            ofClass: NSMutableDictionary.self
        )
        let store = KCSCachedStore(
            collection: collection,
            options: nil
        )
        
        weak var expectationSave = expectationWithDescription("save")
        
        store.saveObject(
            [
                [
                    "name" : "Vancouver",
                    KCSEntityKeyGeolocation : [-123.1207, 49.2827]
                ],
                [
                    "name" : "Whistler",
                    KCSEntityKeyGeolocation : [-122.9544, 50.1208]
                ],
                [
                    "name" : "Kamloops",
                    KCSEntityKeyGeolocation : [-120.3408, 50.6761]
                ]
            ],
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNotNil(results)
                XCTAssertNil(error)
                
                expectationSave?.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError?) -> Void in
            expectationSave = nil
        })
        
        weak var expectationQuery = expectationWithDescription("query")
        
        let query = KCSQuery(
            onField: KCSEntityKeyGeolocation,
            usingConditionalPairs: [
                KCSQueryConditional.KCSNearSphere.rawValue, [-125, 54],
                KCSQueryConditional.KCSMaxDistance.rawValue, 500
            ]
        )
        if let userId = KCSUser.activeUser()?.userId {
            query.addQueryOnField("_acl.creator", withExactMatchForValue: userId)
        }
        store.queryWithQuery(
            query,
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNotNil(results)
                XCTAssertNil(error)
                
                if let results = results {
                    XCTAssertEqual(results.count, 3)
                }
                
                expectationQuery?.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError?) -> Void in
            expectationQuery = nil
        })
        
        weak var expectationQuery2 = expectationWithDescription("query2")
        
        let query2 = KCSQuery(
            onField: KCSEntityKeyGeolocation,
            usingConditionalPairs: [
                KCSQueryConditional.KCSMaxDistance.rawValue, 500,
                KCSQueryConditional.KCSNearSphere.rawValue, [-125, 54]
            ]
        )
        if let userId = KCSUser.activeUser()?.userId {
            query2.addQueryOnField("_acl.creator", withExactMatchForValue: userId)
        }
        store.queryWithQuery(
            query2,
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNotNil(results)
                XCTAssertNil(error)
                
                if let results = results {
                    XCTAssertEqual(results.count, 3)
                }
                
                expectationQuery2?.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError?) -> Void in
            expectationQuery2 = nil
        })
    }

}
