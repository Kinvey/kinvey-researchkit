//
//  KCSTestCase.m
//  KinveyKit
//
//  Created by Victor Barros on 2015-08-14.
//  Copyright (c) 2015 Kinvey. All rights reserved.
//

#import "KCSTestCase.h"
#import "KCS_DDLog.h"
#import "KCSHiddenMethods.h"
#import "KCSURLProtocol.h"

@implementation KCSTestCase

-(void)setUp
{
    [super setUp];
    
    [KCSHttpRequest cancelAndWaitUntilAllOperationsAreFinished];
    [KCSFileRequestManager cancelAndWaitUntilAllOperationsAreFinished];
    [KCSAppdataStore cancelAndWaitUntilAllOperationsAreFinished];
    
    for (Class clazz in [KCSURLProtocol protocolClasses]) {
        [KCSURLProtocol unregisterClass:clazz];
    }
    
    [KCS_DDLog flushLog];
}

-(void)tearDown
{
    [KCSHttpRequest cancelAndWaitUntilAllOperationsAreFinished];
    [KCSFileRequestManager cancelAndWaitUntilAllOperationsAreFinished];
    [KCSAppdataStore cancelAndWaitUntilAllOperationsAreFinished];
    
    for (Class clazz in [KCSURLProtocol protocolClasses]) {
        [KCSURLProtocol unregisterClass:clazz];
    }
    
    [KCS_DDLog flushLog];
    
    [KCSObjectCache setDeltaCacheBlock:nil];
    
    [super tearDown];
}

-(void)setupKCS
{
    [[KCSClient sharedClient] initializeKinveyServiceForAppKey:@"kid_-1WAs8Rh2"
                                                 withAppSecret:@"2f355bfaa8cb4f7299e914e8e85d8c98"
                                                  usingOptions:nil];
    self.masterSecret = @"21a9d07103c6462cb66cac1957c9ecaf";
}

-(KCSUser*)createAutogeneratedUser
{
    __weak __block XCTestExpectation* expectationLogin = [self expectationWithDescription:@"login"];
    __block KCSUser *user = nil;
    
    [KCSUser createAutogeneratedUser:nil
                          completion:^(KCSUser *_user, NSError *errorOrNil, KCSUserActionResult result)
    {
        XCTAssertNil(errorOrNil);
        XCTAssertNotNil(_user);
        
        user = _user;
        
        [expectationLogin fulfill];
    }];
    
    [self waitForExpectationsWithTimeout:30 handler:^(NSError *error) {
        expectationLogin = nil;
    }];
    
    return user;
}

-(void)removeAndLogoutActiveUser:(NSTimeInterval)timeout
{
    KCSUser* user = [KCSUser activeUser];
    if (user) {
        __block __weak XCTestExpectation* expectationRemove = [self expectationWithDescription:@"remove"];
        
        [user removeWithCompletionBlock:^(NSArray *objectsOrNil, NSError *errorOrNil) {
            [expectationRemove fulfill];
        }];
        
        [self waitForExpectationsWithTimeout:timeout handler:^(NSError * _Nullable error) {
            expectationRemove = nil;
        }];
        
        [user logout];
    }
}

@end
